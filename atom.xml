<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JTSYBlog</title>
  
  <subtitle>交通行业应用部</subtitle>
  <link href="/wiki/atom.xml" rel="self"/>
  
  <link href="https://jtsy.github.io/blog/"/>
  <updated>2018-09-17T03:54:59.760Z</updated>
  <id>https://jtsy.github.io/blog/</id>
  
  <author>
    <name>交通运输行业应用部</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>结果集遍历Code值</title>
    <link href="https://jtsy.github.io/blog/2018/09/17/leapcodevalue/"/>
    <id>https://jtsy.github.io/blog/2018/09/17/leapcodevalue/</id>
    <published>2018-09-17T03:46:51.000Z</published>
    <updated>2018-09-17T03:54:59.760Z</updated>
    
    <content type="html"><![CDATA[<ul><li>首先获取所有的代码值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">leapcodevalue[] sexvalues = CodeTypeCache.getInstance().getCodeValues(<span class="string">"ltpujnjs_sex"</span>);</span><br></pre></td></tr></table></figure><ul><li>遍历结果集</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span> (EntityBean data : datas)</span><br><span class="line">&#123;</span><br><span class="line">    String sex = data.getString(<span class="string">"sex"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNoneEmpty(sex)) </span><br><span class="line">        &#123;</span><br><span class="line">            data.set(<span class="string">"cnsex"</span>, LTPUjnjs_getCodevalue(sexvalues, sex));</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>将结果集中的值带入遍历<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * values 所有的代码值</span></span><br><span class="line"><span class="comment"> * code 结果集中的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">LTPUjnjs_getCodevalue</span><span class="params">(leapcodevalue[] values, String code)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (values != <span class="keyword">null</span> &amp;&amp; StringUtils.isNoneEmpty(code)) </span><br><span class="line">       &#123;</span><br><span class="line">          <span class="keyword">for</span> (leapcodevalue value : values) </span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">if</span> (code.equals(value.getcodeid())) </span><br><span class="line">              &#123;</span><br><span class="line">                 <span class="keyword">return</span> value.getcodevalue(); </span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;首先获取所有的代码值&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;
      
    
    </summary>
    
      <category term="LEAP" scheme="https://jtsy.github.io/blog/categories/LEAP/"/>
    
      <category term="服务端" scheme="https://jtsy.github.io/blog/categories/LEAP/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    
      <category term="codevalue" scheme="https://jtsy.github.io/blog/tags/codevalue/"/>
    
  </entry>
  
  <entry>
    <title>获取数组的key &amp; values</title>
    <link href="https://jtsy.github.io/blog/2018/09/13/get-object-value/"/>
    <id>https://jtsy.github.io/blog/2018/09/13/get-object-value/</id>
    <published>2018-09-13T07:47:26.000Z</published>
    <updated>2018-09-13T07:54:40.083Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取数组的key</span></span><br><span class="line"><span class="comment"> * @param object</span></span><br><span class="line"><span class="comment"> * @returns</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getObjectKeys</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> keys = [];</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> property <span class="keyword">in</span> object)</span><br><span class="line"></span><br><span class="line">keys.push(property);</span><br><span class="line"> <span class="keyword">return</span> keys;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取数组的values</span></span><br><span class="line"><span class="comment"> * @param object</span></span><br><span class="line"><span class="comment"> * @returns</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getObjectValues</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> values = [];</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> property <span class="keyword">in</span> object)</span><br><span class="line"></span><br><span class="line">values.push(object[property]);</span><br><span class="line"> <span class="keyword">return</span> values;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="LEAP" scheme="https://jtsy.github.io/blog/categories/LEAP/"/>
    
      <category term="客户端" scheme="https://jtsy.github.io/blog/categories/LEAP/%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
    
      <category term="数组" scheme="https://jtsy.github.io/blog/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="values" scheme="https://jtsy.github.io/blog/tags/values/"/>
    
  </entry>
  
  <entry>
    <title>Js直接获取返回值的数组</title>
    <link href="https://jtsy.github.io/blog/2018/09/13/leap-converesult/"/>
    <id>https://jtsy.github.io/blog/2018/09/13/leap-converesult/</id>
    <published>2018-09-13T07:32:23.000Z</published>
    <updated>2018-09-13T07:44:01.440Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><code>this.request</code>获取<code>EntityBeanSet</code>的返回值<br><img src="http://paz1myrij.bkt.clouddn.com/68747470733a2f2f7773312e73696e61696d672e636e2f6c617267652f303036744e633739677931667265656e65633332726a333137323072777767312e6a7067.jpeg" alt=""></p></li><li><p><code>LEAP.ConvertResult(res)</code> 可以直接获取返回的数组<br><img src="http://paz1myrij.bkt.clouddn.com/111.jpeg" alt=""></p></li><li><p><code>LEAP.ConvertResult</code> 源码</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换ResultSet为object[]</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123;ResultSet&#125;</span></span><br><span class="line"><span class="comment"> *            object</span></span><br><span class="line"><span class="comment"> * @return &#123;object[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LEAP.convertResult = <span class="function"><span class="keyword">function</span>(<span class="params">object</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (object != <span class="literal">null</span> &amp;&amp; object.javaClass != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (object.javaClass == commfields.rsc)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (object == <span class="literal">null</span> || object.result == <span class="literal">null</span> || object.result.length == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> _objs = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">            <span class="keyword">var</span> l = object.result.length;</span><br><span class="line">            <span class="keyword">var</span> hascvs = object.codeValues != <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; l;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> _obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">                <span class="keyword">var</span> cells = object.result[i];</span><br><span class="line">                <span class="keyword">if</span> (!cells)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">var</span> ll = object.metaData.length;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j &lt; ll;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> _md = object.metaData[j].name;</span><br><span class="line">                    <span class="keyword">var</span> _type = object.metaData[j].type;</span><br><span class="line">                    <span class="keyword">var</span> _value = cells[j];</span><br><span class="line">                    <span class="keyword">if</span> (hascvs)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> _tt = object.codeValues[i];</span><br><span class="line">                        <span class="keyword">if</span> (_tt != <span class="literal">null</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            _cv = _tt[j]</span><br><span class="line">                            <span class="keyword">if</span> (_cv != <span class="literal">null</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                _obj[commfields.rsccv + _md] = _cv;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//|| _type == 2 || _type == 3</span></span><br><span class="line">                    <span class="keyword">if</span> (_type == <span class="number">-5</span> || _type == <span class="number">-6</span> || _type == <span class="number">-7</span> || _type == <span class="number">4</span> || _type == <span class="number">5</span> || _type == <span class="number">6</span></span><br><span class="line">                            || _type == <span class="number">7</span> || _type == <span class="number">8</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">String</span>.isEmpty(_value))</span><br><span class="line">                            _value = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">else</span> _value = LEAP.tonum(_value);</span><br><span class="line">                    &#125;</span><br><span class="line">                    _obj[_md] = _value;</span><br><span class="line">                &#125;</span><br><span class="line">                _objs.add(_obj);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _objs;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (object.javaClass == <span class="string">'com.longrise.LEAP.Base.Objects.EntitySet'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> object.result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (object.javaClass == <span class="string">'com.longrise.LEAP.Base.Objects.EntityBeanSet'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (object == <span class="literal">null</span> || object.result == <span class="literal">null</span> || object.result.length == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> _objs = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">            <span class="keyword">var</span> l = object.result.length;</span><br><span class="line">            <span class="keyword">var</span> hascvs = object.codeValues != <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (hascvs)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; l;i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> _obj = object.result[i];</span><br><span class="line">                    <span class="keyword">var</span> cells = object.result[i];</span><br><span class="line">                    <span class="keyword">if</span> (!cells)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">var</span> ll = object.metaData.length;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>;j &lt; ll;j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">var</span> _md = object.metaData[j].name;</span><br><span class="line">                        <span class="keyword">var</span> _type = object.metaData[j].type;</span><br><span class="line">                        <span class="keyword">var</span> _value = cells[_md];</span><br><span class="line">                        <span class="keyword">if</span> (hascvs)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">var</span> _tt = object.codeValues[i];</span><br><span class="line">                            <span class="keyword">if</span> (_tt != <span class="literal">null</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                _cv = _tt[j]</span><br><span class="line">                                <span class="keyword">if</span> (_cv != <span class="literal">null</span>)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    _obj[commfields.rsccv + _md] = _cv;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (_type == <span class="number">-5</span> || _type == <span class="number">-6</span> || _type == <span class="number">-7</span> || _type == <span class="number">4</span> || _type == <span class="number">5</span></span><br><span class="line">                                || _type == <span class="number">6</span> || _type == <span class="number">7</span> || _type == <span class="number">8</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (<span class="built_in">String</span>.isEmpty(_value))</span><br><span class="line">                                _value = <span class="literal">null</span>;</span><br><span class="line">                            <span class="keyword">else</span> _value = LEAP.tonum(_value);</span><br><span class="line">                        &#125;</span><br><span class="line">                        _obj[_md] = _value;</span><br><span class="line">                    &#125;</span><br><span class="line">                    _objs.add(_obj);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> _objs;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> object.result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (object != <span class="literal">null</span> &amp;&amp; object.result != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> object.result;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;this.request&lt;/code&gt;获取&lt;code&gt;EntityBeanSet&lt;/code&gt;的返回值&lt;br&gt;&lt;img src=&quot;http://paz1myrij.bkt.clouddn.com/68747470733a2f2f7773312e
      
    
    </summary>
    
      <category term="LEAP" scheme="https://jtsy.github.io/blog/categories/LEAP/"/>
    
      <category term="客户端" scheme="https://jtsy.github.io/blog/categories/LEAP/%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
    
      <category term="LEAP" scheme="https://jtsy.github.io/blog/tags/LEAP/"/>
    
      <category term="ConvertResult" scheme="https://jtsy.github.io/blog/tags/ConvertResult/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse | Formatter &amp; CodeTemplates 格式化和代码注释</title>
    <link href="https://jtsy.github.io/blog/2018/09/13/eclipse-formatter-codetemplates/"/>
    <id>https://jtsy.github.io/blog/2018/09/13/eclipse-formatter-codetemplates/</id>
    <published>2018-09-13T07:26:49.000Z</published>
    <updated>2018-09-13T07:29:28.312Z</updated>
    
    <content type="html"><![CDATA[<p>团队里面最好能统一风格，这样在看别人代码的时候就比较清晰。</p><h2><span id="codetemplates">CodeTemplates</span></h2><blockquote><p>写注释比不写好<br>注释的格式其实也有模板的</p></blockquote><ul><li><p>没有用注释模板<br><img src="http://paz1myrij.bkt.clouddn.com/20180718165007.png" alt="image"></p></li><li><p>使用注释模板<br><img src="http://paz1myrij.bkt.clouddn.com/20180718165620.png" alt="image"></p></li></ul><p><code>/** */</code>  一般用在<code>Method</code>上面<br><code>//</code>  单行注册用在代码的上面， 也有人用在代码的后面，但是个人不建议    </p><h2><span id="formatter">Formatter</span></h2><blockquote><p>关于代码格式化目前只碰到大括号是否独立一行的情况<br>一下格式化是以大括号独立一行为标准    </p></blockquote><ul><li><p>格式化前<br><img src="http://paz1myrij.bkt.clouddn.com/20180718165620.png" alt="image"></p></li><li><p>格式化后<br><img src="http://paz1myrij.bkt.clouddn.com/20180718170025.png" alt="image"></p></li></ul><p>格式化后代码阅读起来比较清晰   </p><h2><span id="eclipse-配置formatter">Eclipse 配置<code>Formatter</code></span></h2><p>在Eclipse工具栏选择 <code>Preferences</code> -&gt; <code>Java</code> -&gt; <code>Code Style</code> -&gt; <code>Formatter</code></p><p><img src="http://paz1myrij.bkt.clouddn.com/20180718171438.png" alt="image"></p><ul><li>选择 <code>Edit...</code> 或者 ‘New…’</li></ul><p><img src="http://paz1myrij.bkt.clouddn.com/20180718171618.png" alt="image"></p><h3><span id="indentation-缩进"><code>Indentation</code> 缩进</span></h3><p>我个人习惯将<code>Tab policy</code> 选择为 <code>Spaces only</code>，因为可以保证在不同的IDE中代码的兼容性比较好<br>在使用Tab的时候实际上是空了4格    </p><h3><span id="brace-positions-配置大括号"><code>Brace positions</code> 配置大括号</span></h3><ul><li><code>Same line</code> 在同一行</li><li><code>Next line</code> 换行（大括号独立一行）</li><li><code>Next line indented</code> 换行并缩进</li><li><code>Next line on wrap</code> 不知道</li></ul><p><strong>其他的配置没有研究过，有兴趣可以自己去研究</strong><br>或者参考<a href="https://blog.csdn.net/jmyue/article/details/11060003" rel="external nofollow noopener noreferrer" target="_blank">玩转Eclipse — 自动代码规范化 - CSDN博客</a></p><p>或者直接导入我的<code>Formatter</code>模板</p><h2><span id="eclipse-配置codetemplate">Eclipse 配置<code>CodeTemplate</code></span></h2><p>在Eclipse工具栏选择  <code>Preferences</code> -&gt; <code>Java</code> -&gt; <code>Code Style</code> -&gt; <code>Code Templates</code><br><img src="http://paz1myrij.bkt.clouddn.com/20180718181437.png" alt="">    </p><p>在<code>Comments</code> 中 配置各个类型的注释格式</p><p>选中类型后选择<code>Edit...</code>开始编辑<br><img src="http://paz1myrij.bkt.clouddn.com/20180718182305.png" alt="image"><br><code>Insert Variable...</code> 可以选择各种参数    </p><p>配置好后使用方式是在<code>method</code>上 输入<code>/** + 回车</code> 就会显示配置的注释    </p><p>也可以下载我的<code>CodeTemplate</code> 模板导入<br>如果使用我的模板请将<code>@author</code> 改成你自己的名字</p><p><a href="https://github.com/LxHubei/IDE-Style" rel="external nofollow noopener noreferrer" target="_blank">模板下载地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;团队里面最好能统一风格，这样在看别人代码的时候就比较清晰。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;codetemplates&quot;&gt;CodeTemplates&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;写注释比不写好&lt;br&gt;注释的格式其实也有模板的&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
      <category term="工具&amp;配置" scheme="https://jtsy.github.io/blog/categories/%E5%B7%A5%E5%85%B7-%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Eclipse" scheme="https://jtsy.github.io/blog/tags/Eclipse/"/>
    
      <category term="Formatter" scheme="https://jtsy.github.io/blog/tags/Formatter/"/>
    
      <category term="CodeTemplates" scheme="https://jtsy.github.io/blog/tags/CodeTemplates/"/>
    
  </entry>
  
  <entry>
    <title>html中代码表自动更新</title>
    <link href="https://jtsy.github.io/blog/2018/09/13/dynacode/"/>
    <id>https://jtsy.github.io/blog/2018/09/13/dynacode/</id>
    <published>2018-09-13T07:22:31.000Z</published>
    <updated>2018-09-13T07:24:53.425Z</updated>
    
    <content type="html"><![CDATA[<ul><li>添加属性 <code>dynacode=1</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;添加属性 &lt;code&gt;dynacode=1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
      <category term="LEAP" scheme="https://jtsy.github.io/blog/categories/LEAP/"/>
    
      <category term="客户端" scheme="https://jtsy.github.io/blog/categories/LEAP/%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
    
      <category term="代码表" scheme="https://jtsy.github.io/blog/tags/%E4%BB%A3%E7%A0%81%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>在LEAP项目如何使用Swagger调试Restful Api</title>
    <link href="https://jtsy.github.io/blog/2018/09/13/SwaggerApi/"/>
    <id>https://jtsy.github.io/blog/2018/09/13/SwaggerApi/</id>
    <published>2018-09-13T05:34:56.000Z</published>
    <updated>2018-09-13T07:08:23.413Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="背景">背景</span></h3><blockquote><p>在前后端分离开发环境中，后端同事开发好接口后，前端同事需要没有一个浏览所有接口的页面<br><code>LEAP</code>中是通过 <code>/restservices</code> 访问所有发布的接口，界面不是特别友好</p></blockquote><!-- toc --><ul><li><a href="#具体配置">具体配置</a><ul><li><a href="#添加类注解">添加类注解</a></li><li><a href="#添加方法注解">添加方法注解</a></li><li><a href="#样例">样例</a></li><li><a href="#创建swagger匹配类-restapiconfig">创建Swagger匹配类 RestApiConfig</a></li><li><a href="#meta-inf配置">META-INF配置</a></li><li><a href="#测试">测试</a></li></ul></li></ul><!-- tocstop --><p><code>Swagger</code>是基于<code>REST API</code>测试/文档类插件，由于<code>LEAP</code>中可能存在第三方包不兼容的问题（没有针对原<code>Swagger</code>服务包做兼容测试，本着能少引用包就少引用的想法），我将<code>Swagger</code>服务整合在<code>LWEG</code>公共项目中。</p><h3><span id="具体配置">具体配置</span></h3><ul><li>打包最新<code>LWEG.BLL.jar</code></li></ul><p><strong><em>在<code>Service</code>类!!!</em></strong></p><h4><span id="添加类注解">添加类注解</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span> </span><br><span class="line"><span class="meta">@Api</span>(name = <span class="string">"PAD RESTful API"</span>, description = <span class="string">"技能竞赛PAD端Restservices Api"</span>) <span class="comment">// name:分类名称; description:本类的描述信息;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNJSPADService</span> <span class="keyword">extends</span> <span class="title">LEAPContextService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="添加方法注解">添加方法注解</span></h4><ul><li><code>@ApiOperation(value=&quot;方法名&quot;, notes=&quot;描述&quot;)</code>    </li><li><code>@ApiImplicitParams</code> <code>ApiImplicitParam</code><ul><li><code>name</code>参数名称.</li><li><code>value</code> 参数中文名称.</li><li><code>example</code> 测试数据.     </li></ul></li></ul><p>所有曝光的参数都要求只传<code>EntityBean</code>.比如,方法要接收两个参数name 和 age ,那就请将这两个放到<code>EntityBean</code>中 , 然后将EntityBean传给方法,特殊例外,这样写的好处是方便之后扩展.我们还要将方法中必须用到的参数写到注解中,这样方便前端调试.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"Bean里面的参数说明"</span>, value = <span class="string">"参数名称"</span>, example = <span class="string">"测试数据"</span>),</span><br><span class="line">        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"Bean里面的参数说明"</span>, value = <span class="string">"参数名称"</span>, example = <span class="string">"测试数据"</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><ul><li><code>@RequestMapping</code> restservices 地址 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/JNJSApi/PAD_Template/query"</span>&#125;) <span class="comment">//'restservices 地址'</span></span><br></pre></td></tr></table></figure></li></ul><h4><span id="样例">样例</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Api 样例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: PAD_Template</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lix.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018年8月28日 下午5:38:58 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"API 服务样例"</span>, notes = <span class="string">"入参统一用EntityBean，出参用JsonResult"</span>)      </span><br><span class="line"><span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"Bean里面的参数说明"</span>, value = <span class="string">"参数名称"</span>, example = <span class="string">"测试数据"</span>),</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"Bean里面的参数说明"</span>, value = <span class="string">"参数名称"</span>, example = <span class="string">"测试数据"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/JNJSApi/PAD_Template/query"</span>&#125;) <span class="comment">//'restservices 地址'</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">PAD_Template</span><span class="params">(EntityBean bean)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    JNJSPADLogic logic = SingletonService.getInstance(JNJSPADLogic.class);</span><br><span class="line">    LogicManager.getInstance().setLogic(<span class="keyword">this</span>, logic);</span><br><span class="line">    <span class="keyword">return</span> logic.PAD_Template(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="创建swagger匹配类-restapiconfig">创建Swagger匹配类 RestApiConfig</span></h4><ul><li><code>description</code> 描述信息</li><li><code>title</code> 标题</li><li><code>termsOfServiceUrl</code> 服务反馈地址或者官网</li><li><code>contact</code> 开发者</li><li><code>version</code> 版本号<br>目前一个包一个类就够了.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.longrise.JNJS.Conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.longrise.LWEG.UnifyPort.Pojo.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> com.longrise.LWEG.UnifyPort.Pojo.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> com.longrise.LWEG.UnifyPort.Pojo.Contact;</span><br><span class="line"><span class="keyword">import</span> com.longrise.LWEG.UnifyPort.Pojo.ExternalDocs;</span><br><span class="line"><span class="keyword">import</span> com.longrise.LWEG.UnifyPort.Swagger.DocInit;</span><br><span class="line"><span class="keyword">import</span> com.longrise.LWEG.UnifyPort.Swagger.SwaggerApiConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestApiConfig</span> <span class="keyword">implements</span> <span class="title">SwaggerApiConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DocInit <span class="title">createRestApi</span><span class="params">(List&lt;String&gt; list)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DocInit().apiInfo(apiInfo()).basePackage(list).externalDocs(externalDocs()).build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder().description(<span class="string">""</span> +</span><br><span class="line">                <span class="string">"&lt;div class='ex_description'&gt;"</span> +</span><br><span class="line">                <span class="string">"   &lt;span&gt;&lt;strong&gt;测试地址&lt;/strong&gt;：http://192.168&lt;/span&gt;"</span> +</span><br><span class="line">                <span class="string">"   &lt;span&gt;&lt;strong&gt;正式地址&lt;/strong&gt;：http://192.168&lt;/span&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;/div&gt;"</span>)</span><br><span class="line">        .title(<span class="string">"技能竞赛 RESTful API"</span>)</span><br><span class="line">        .termsOfServiceUrl(<span class="string">""</span>)</span><br><span class="line">        .contact(<span class="keyword">new</span> Contact(<span class="string">"lix、wangf"</span>, <span class="string">""</span>, <span class="string">"lix@longrise.com.cn、wangf@longrise.com.cn"</span>))</span><br><span class="line">        .version(<span class="string">"1.0"</span>)</span><br><span class="line">        .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> ExternalDocs <span class="title">externalDocs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ExternalDocs(<span class="string">"Find out more about LEAP"</span>, <span class="string">"http://www.longrise.com.cn"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4><span id="meta-inf配置">META-INF配置</span></h4><ul><li>在<code>SERVICE.CONF</code>中添加<code>JNJSApi com.longrise.JNJS.BLL.JNJSPADService {rest}</code></li><li>在<code>SWAGGER.CONF</code>中添加<code>RestApiConfig</code>的限定名 <code>com.longrise.JNJS.Conf.RestApiConfig</code></li></ul><h4><span id="测试">测试</span></h4><ul><li><p>打开 <code>http://localhost:8012/JNJS/LEAP/Swagger/index.html?type=jnjs</code>,type为你要访问的包名称,因为可以很多包都放在一个项目中,所以根据包名来区分.<br><img src="http://paz1myrij.bkt.clouddn.com/20180828174553.png" alt=""></p></li><li><p>如果你上面配置的都没有问题那么直接点 1 的位置 参数就自动设置到值,然后点测试将会有返回结果<br><img src="http://paz1myrij.bkt.clouddn.com/20180828174659.png" alt=""><br><img src="http://paz1myrij.bkt.clouddn.com/20180828174734.png" alt=""></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;背景&quot;&gt;背景&lt;/span&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在前后端分离开发环境中，后端同事开发好接口后，前端同事需要没有一个浏览所有接口的页面&lt;br&gt;&lt;code&gt;LEAP&lt;/code&gt;中是通过 &lt;code&gt;/restservices&lt;/cod
      
    
    </summary>
    
      <category term="开源" scheme="https://jtsy.github.io/blog/categories/%E5%BC%80%E6%BA%90/"/>
    
      <category term="接口" scheme="https://jtsy.github.io/blog/categories/%E5%BC%80%E6%BA%90/%E6%8E%A5%E5%8F%A3/"/>
    
    
      <category term="Swagger" scheme="https://jtsy.github.io/blog/tags/Swagger/"/>
    
      <category term="Restful Api" scheme="https://jtsy.github.io/blog/tags/Restful-Api/"/>
    
  </entry>
  
</feed>
